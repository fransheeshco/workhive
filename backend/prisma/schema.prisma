generator client {
  provider = "prisma-client-js"
  output   = "../source/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../source/generated/schemas"
}

model User {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  email     String         @unique
  password  String
  job       String?
  projects  ProjectMember[]
  tasks     Task[]         @relation("AssignedTasks")
  comments  TaskComment[]
}

model Project {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  title       String
  description String
  status      Status          @default(IN_PROGRESS)
  members     ProjectMember[]
  tasks       Task[]
}

model ProjectMember {
  id        Int          @id @default(autoincrement())
  project   Project      @relation(fields: [projectId], references: [id])
  projectId Int
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  role      ProjectRole  @default(MEMBER)
}

model Task {
  id          Int           @id @default(autoincrement())
  project     Project       @relation(fields: [projectId], references: [id])
  projectId   Int
  title       String
  description String?
  priority    Priority      @default(HIGH)
  assignedTo  User?         @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId Int?
  deadline    DateTime?
  comments    TaskComment[]
}

model TaskComment {
  id        Int      @id @default(autoincrement())
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  comment   String
  createdAt DateTime @default(now())
}

enum ProjectRole {
  PROJECT_MANAGER
  MEMBER
}

enum Status {
  STARTED
  IN_PROGRESS
  FINISHED
}

enum Priority {
  LOW 
  MEDIUM
  HIGH
}
